name: QtApplicationManager Build Matrix

on: 
  push:
  workflow_dispatch:

env:
  TESTARGS: "-o -,txt -o xunit.xml,xunitxml"

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
#         - name: "Windows 32bit"
#           artifact: "Windows-x86.exe"
#           os: windows-latest
#           am_version: 5.12
#           qt_version: 5.12.9
#           qt_arch: 'win32_msvc2017'
#           environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars32.bat"
          
        - name: "Ubuntu 20.04 64bit"
          artifact: "Ubuntu-20.04-amd64.deb"
          os: ubuntu-20.04
          am_version: 5.12
          qt_version: 5.12.9
          qt_arch: ''
          
#         - name: "macOS 64bit"
#           artifact: "macOS.dmg"
#           os: macos-latest
#           am_version: 5.12
#           qt_version: 5.12.9
#           qt_arch: ''

#         - name: "Windows 32bit"
#           artifact: "Windows-x86.exe"
#           os: windows-latest
#           am_version: 5.15
#           qt_version: 5.15.0
#           qt_arch: 'win32_msvc2019'
#           environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars32.bat"
          
#         - name: "Ubuntu 20.04 64bit"
#           artifact: "Ubuntu-20.04-amd64.deb"
#           os: ubuntu-20.04
#           am_version: 5.15
#           qt_version: 5.15.0
#           qt_arch: ''
          
#         - name: "macOS 64bit"
#           artifact: "macOS.dmg"
#           os: macos-latest
#           am_version: 5.15
#           qt_version: 5.15.0
#           qt_arch: ''

    steps:       
    - name: Install OpenSSL on Windows
      if: startsWith(matrix.config.os, 'windows')
      shell: cmd
      run: |
        curl.exe --output openssl.msi "https://slproweb.com/download/Win32OpenSSL_Light-1_1_1g.msi"
        msiexec /i openssl.msi /quiet /qn /norestart

    - name: Checkout QtApplicationManager
      run: |
        git clone https://code.qt.io/git/qt/qtapplicationmanager.git --branch ${{ matrix.config.am_version }} am

    - name: Install Qt from qt.io
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{ matrix.config.qt_version }}
        modules: 'qtsvg qttools'
        arch: ${{ matrix.config.qt_arch }}

    - name: Build on Windows
      if: startsWith(matrix.config.os, 'windows')
      shell: cmd
      run: |
        call "${{ matrix.config.environment_script }}"
        cd am
        qmake -config silent -config release -config enable-examples -config enable-tests
        nmake

    - name: Run Tests on Windows
      if: startsWith(matrix.config.os, 'windows')
      continue-on-error: true
      shell: cmd
      run: |
        call "${{ matrix.config.environment_script }}"
        cd am
        nmake check

    - name: Build on Linux
      if: (startsWith(matrix.config.os, 'ubuntu'))
      run: |
        sudo apt install libwayland-dev libwayland-bin libxkbcommon-dev
        cd am
        qmake -config silent -config release -config enable-examples -config enable-tests
        make

    - name: Run Tests on Linux
      if: (startsWith(matrix.config.os, 'ubuntu'))
      continue-on-error: true
      run: |
        sudo apt-get install xvfb
        cd am
        xvfb-run --auto-servernum sudo -E make check || true
        for i in $(find . -name xunit.xml); do echo "File $i"; cat $i; echo "-------------"; echo; done
      shell: bash
  
    - name: Build on macOS
      if: (startsWith(matrix.config.os, 'mac'))
      run: |
        cd am
        qmake -config silent -config release -config enable-examples -config enable-tests
        make

    - name: Run Tests on macOS
      if: (startsWith(matrix.config.os, 'mac'))
      continue-on-error: true
      run: |
        cd am
        make check

    - name: Publish Test Report
      uses: scacap/action-surefire-report@v1
      with:
        report_paths: am/**/xunit.xml
        github_token: ${{ secrets.GITHUB_TOKEN }}
